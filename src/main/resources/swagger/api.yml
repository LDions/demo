openapi: 3.0.1 #openapi版本
info: #api元数据
  title: 文档标题：xxxx开放平台接口文档
  description: 描述
  termsOfService: http://swagger.io/terms/ #指向服务条款的URL地址
  contact: #所开放的API的联系人信息（名称，指向联系人的url，邮箱地址）
    email: apiteam@swagger.io #联系人邮箱
  license: #所开放的API的证书信息
    name: Apache 2.0 #授权名称
    url: http://www.apache.org/licenses/LICENSE-2.0.html #授权url
  version: 1.0.0
servers: #服务器连接信息
  - url: https://localhost:8080/api
#  - url: http://petstore.swagger.io/v2
#各模块信息描述，Tag 对象用于对 path 对象中的 API 进行分组，可以更美观的生成文档。
#tags:
#  - name: 项目名
#    description: 项目描述
#    externalDocs:
#      description: 发现更多
#      url: http://swagger.io
#  - name: 商店
#    description: 模块描述
#  - name: 用户
#    description: 模块描述
#    externalDocs:  #附加文档
#      description: Find out more about our store
#      url: http://swagger.io
paths:
  /pet/upload:
    post:
      tags:
        - 宠物管理
      summary: 上传宠物图片
      requestBody:
        description: 上传图片
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: 上传成功
          content:
            application/json:
              schema:
                type: object #type定义成object类型的才可返回示例数据
                properties:
                  url:
                    type: string
                    format: string
                    example: http://192.168.1.113/upload/ace.jpg

                #properties:
                #  url:
                #    description: url
                #    type: string
                #    example: https://192.168.1.113/images/aebc.jpg

  /pets:
    put:
      tags: #接口分组
        - 宠物管理
      summary: 修改宠物信息
      operationId: updatePet #此操作的唯一标识符
      requestBody: #请求体
        description: 修改宠物对象
        content: #请求体的内容
          application/json:
            schema: #请求格式
              $ref: '#/components/schemas/UpdatePetQM'
        #required: true  #请求体是否被包含在请求中，默认值 false
      responses:
        200:
          description: 成功修改一条宠物记录
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Pet'
      #security:
      #  - petstore_auth:
      #      - write:pets
      #      - read:pets
      #x-codegen-request-body-name: body
    post:
      tags:
        - 宠物管理
      summary: 新增宠物信息
      operationId: addPet
      requestBody:
        description: 增加个宠物
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPetQM'
      responses:
        '200':
          description: 返回新增的宠物信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
  /pet/findByStatus:
    get:
      tags:
        - 宠物管理
      summary: 列表：根据状态查询宠物
      description: 根据宠物的状态查询宠物的信息
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query #path时style用simple，query时用form
          description: 宠物状态
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - PRESALE
              - SALE
              - ENDSALE
        - name: page
          in: query
          description: 页数
          required: false
          style: form
          explode: true
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 每页个数
          required: false
          style: form
          explode: true
          schema:
            type: integer
            default: 10
        #- name: pageable
        #  in: query
        #  description: 每页个数
        #  required: false
        #  #style: form
        #  #explode: true
        #  content:
        #    application/json:
        #      schema:
        #        type: object
        #        $ref: Pageable
        #- name: sort
        #  in: query
        #  description: 排序
        #  required: false
        #  style: form
        #  schema:
        #    type: array
        #    items:
        #      type: string
        #      format: string
      responses:
        200:
          description: 操作成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagePet'

  /pet/{petId}:
    get:
      tags:
        - 宠物管理
      summary: 查询宠物信息
      description: 根据ID查询宠物信息
      operationId: getPetById
      parameters:
        - name: petId #参数
          in: path #请求类型
          description: 宠物id
          required: true #是否必须i
          schema:
            type: integer #数据类型
            format: int64
      responses: #响应状态
        200:
          description: 请求成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'

    post:
      tags:
        - 宠物管理
      summary: 更新宠物
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: 宠物ID不能为空
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: 宠物名
                  example: 金毛
                status:
                  type: string
                  description: 宠物状态
                  enum:
                    - PRESALE
                    - SALE
                    - ENDSALE
      responses:
        200:
          description: 请求成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'

    delete:
      tags:
        - 宠物管理
      summary: 删除宠物信息
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          description: 根据ID删除宠物信息
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 请求成功
          content: {}

components: #一个包含多种纲要的元素，可重复使用组件
  schemas: #定义封装对象  Schema 对象用于定义输入和输出的数据类型。这些类型可以是对象，也可以是原始值和数组。
    #Pageable:
    #  type: object
    AddPetQM:
      required:
        - name
        - status
      type: object
      properties:
        name:
          description: 宠物名
          type: string
          example: 柯基
        age:
          description: 宠物年龄
          type: integer
          minimum: 1
          maximum: 50
          format: int32
        sex:
          description: 宠物性别
          type: string
          format: string
          example: 女娃
        price:
          description: 宠物价格
          type: number
          format: double
          example: 786.36
          default: 0.00
        color:
          description: 宠物颜色
          type: string
          format: string
          example: 白色
        status:
          description: 宠物状态[在售，售空]
          type: string
          enum:
            - PRESALE
            - SALE
            - ENDSALE
    UpdatePetQM:
      required:
        - name
        - status
      type: object
      properties:
        id:
          description: ID
          type: integer
          example: 1
        name:
          description: 宠物名
          type: string
          example: 小柯基犬
        age:
          description: 宠物年龄
          type: integer
          minimum: 1
          maximum: 50
          format: int32
        price:
          description: 宠物价格
          type: number
          format: double
          example: 986.36
          default: 0.00
        status:
          description: 宠物状态[在售，售空]
          type: string
          enum:
            - PRESALE
            - SALE
            - ENDSALE
    Pet:
      required:
        - name
        - status
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          description: 宠物名
          type: string
          example: 柯基
        age:
          description: 宠物年龄
          type: integer
          minimum: 1
          maximum: 50
          format: int32
        sex:
          description: 宠物性别
          type: string
          format: string
          example: 女娃
        price:
          description: 宠物价格
          type: number
          format: double
          example: 786.36
          default: 0.00
        color:
          description: 宠物颜色
          type: string
          format: string
          example: 黑色
        status:
          description: 宠物状态[在售，售空]
          type: string
          example: SALE
          enum:
            - PRESALE
            - SALE
            - ENDSALE
    PetDTO:
      #required:
      #  - name
      #  - status
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          description: 宠物名
          type: string
          example: 柯基
        age:
          description: 宠物年龄
          type: integer
          minimum: 1
          maximum: 50
          #format: int32
        sex:
          description: 宠物性别
          type: string
          #format: string
          example: 女娃
        price:
          description: 宠物价格
          type: number
          #format: double
          example: 786.36
        color:
          description: 宠物颜色
          type: string
          #format: string
          example: 黑色
        createTime:
          description: 创建时间
          type: string
        status:
          description: 宠物状态[在售，售空]
          type: string
          enum:
            - PRESALE
            - SALE
            - ENDSALE
    PetGetDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          description: 宠物名
          type: string
          example: 柯基
        age:
          description: 宠物年龄
          type: integer
          minimum: 1
          maximum: 50
          format: int32
        sex:
          description: 宠物性别
          type: string
          format: string
          example: 女娃
        price:
          description: 宠物价格
          type: number
          format: double
          example: 786.36
          default: 0.00
        color:
          description: 宠物颜色
          type: string
          format: string
          example: 黑色
        createTime:
          description: 创建时间
          type: string
    PagePet:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PetDTO'
        pageNumber:
          type: integer
          example: 0
        pageSize:
          type: integer
          example: 10
        #pageable:
        #  type: object
        #  properties:
        #    sort:
        #      type: object
        #      properties:
        #        sorted:
        #          type: boolean
        #          example: true
        #        unsorted:
        #          type: boolean
        #          example: false
        #        empty:
        #          type: boolean
        #          example: false
        #    offset:
        #      type: integer
        #      format: int32
        #      example: 0
        #    pageNumber:
        #      type: integer
        #      format: int32
        #      example: 0
        #    pageSize:
        #      type: integer
        #      format: int32
        #      example: 10
        #    paged:
        #      type: boolean
        #      example: true
        #    unpaged:
        #      type: boolean
        #      example: false
        #totalElements:
        #  type: integer
        #  format: int32
        #  example: 0
        #last:
        #  type: boolean
        #  example: true
        #totalPages:
        #  description: 总页数
        #  type: integer
        #  format: int32
        #  example: 3
        #number:
        #  description: 分页
        #  type: integer
        #  format: int32
        #  example: 0
        #size:
        #  description: 个数
        #  type: integer
        #  format: int32
        #  example: 10
        #sort:
        #  description: 排序
        #  type: object
        #  properties:
        #    sorted:
        #      description: 是否排序
        #      type: boolean
        #      example: true
        #    unsorted:
        #      description: 不排序
        #      type: boolean
        #      example: false
        #    empty:
        #      description: 是否为空
        #      type: boolean
        #      example: false
        #numberOfElements:
        #  type: integer
        #  format: int32
        #  example: 0
        #first:
        #  type: boolean
        #  example: true
        #empty:
        #  type: boolean
        #  example: true
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
  securitySchemes: #用于描述 API 中使用的身份验证方法（全局变量设置token）
    jwt_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key #name 用于 header、 query 或 cookie 的参数名字
      in: header #指定 API 密钥的位置。有效值包括：query、header、cookie
security:
  - jwt: []
  - basic: []
