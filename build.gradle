buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins { //插件配置；格式为id «plugin id» version «plugin version» [apply «false»] Gradle的核心插件只需提供id的简称就可以
    id "java"
    id "maven-publish"
    id "idea"
    id "eclipse"
    id "jacoco"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "com.github.node-gradle.node"
//    id "org.liquibase.gradle"
    id "org.sonarqube"
    id "io.spring.nohttp"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "com.hzy.mydemo"
version = "0.0.1-SNAPSHOT"

description = ""

sourceCompatibility=8 //指定编译.java文件的jdk版本，选择的JDK是11，本地电脑只有8，不兼容，改成为本地支持的
targetCompatibility=8
assert System.properties["java.specification.version"] == "1.8" || "1.9" || "10" || "11" || "12" || "13" || "14" || "15"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod") || project.hasProperty("gae")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("gae")) {
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot.experimental.thin-launcher'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom "tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}"
        }
    }
    appengineStage.dependsOn thinResolve
}


idea {
    module {
        excludeDirs += files("node_modules")
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

defaultTasks "bootRun"

springBoot {
    mainClassName = "com.hzy.mydemo.DemoApp"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }

    if (project.hasProperty('testcontainers')) {
        environment 'spring.profiles.active', 'testcontainers'
    }

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

project.ext.diffChangelogFile = "src/main/resources/config/liquibase/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.xml"

//liquibase {
//    activities {
//        main {
//            driver "com.mysql.cj.jdbc.Driver"
//            url "jdbc:mysql://localhost:3306/demo"
//            username "root"
//            password ""
//            changeLogFile "src/main/resources/config/liquibase/master.xml"
//            defaultSchemaName "demo"
//            logLevel "debug"
//            classpath "src/main/resources/"
//        }
//        diffLog {
//            driver "com.mysql.cj.jdbc.Driver"
//            url "jdbc:mysql://localhost:3306/demo"
//            username "root"
//            password ""
//            changeLogFile project.ext.diffChangelogFile
//            referenceUrl "hibernate:spring:com.hzy.mydemo.modules.firstversion.domain?dialect=org.hibernate.dialect.MySQL8Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
//            defaultSchemaName "demo"
//            logLevel "debug"
//            classpath "$buildDir/classes/java/main"
//        }
//    }
//
//    runList = project.ext.runList
//}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
    toolVersion "${checkstyleVersion}"
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
}
nohttp {
    source.include "build.gradle", "README.md"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
    all {
        resolutionStrategy {
            // Inherited version from Spring Boot can't be used because of regressions:
            // To be removed as soon as spring-boot use the same version
            force 'org.liquibase:liquibase-core:4.3.2'
        }
    }
}

repositories { //仓库配置，mavenCentral()代表中央仓库，你也可以用maven{url ‘<url>’}的方式添加一个仓库
    mavenLocal()
    mavenCentral()
    //jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies { //依赖的坐标集合
    // import JHipster dependencies BOM
    if (!project.hasProperty("gae")) {
        implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")
    }

    // Use ", version: jhipsterDependenciesVersion, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation 'io.github.jhipster:jhipster-framework:3.8.0'  //swagger配置文件用到
    implementation group: "tech.jhipster", name: "jhipster-framework"
    implementation "javax.annotation:javax.annotation-api"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "io.dropwizard.metrics:metrics-core"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "javax.cache:cache-api"
    implementation "org.hibernate:hibernate-core"
    implementation "com.zaxxer:HikariCP"
    implementation "org.apache.commons:commons-lang3"
    implementation "javax.transaction:javax.transaction-api"
    implementation "org.ehcache:ehcache"
    implementation "org.hibernate:hibernate-entitymanager"
    implementation "org.hibernate.validator:hibernate-validator"
//    implementation "org.liquibase:liquibase-core"
//    liquibaseRuntime "org.liquibase:liquibase-core"
//    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibaseHibernate5Version}"
//    liquibaseRuntime sourceSets.main.compileClasspath
    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-logging" //日志依赖，一般不用直接添加，spring-boot-starter中其中就包含了这个，该依赖的内容就是spring boot默认的日志框架
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation 'org.projectlombok:lombok:1.18.18'  //@Slf4j注解导入
//    implementation(group: 'org.projectlombok', name: 'lombok', version: '1.18.16')  这种格式应该是完整的写法
//    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.16' 两种方式都可以，最好是上一种，compile方式被弃用了
    annotationProcessor('org.projectlombok:lombok:1.18.16')  //加了这句lombok中的@Data,@Slf4j等注解才好使，build的时候不会出现找不到符号
    implementation(group: 'com.alibaba', name: 'fastjson', version: '1.2.75')
//    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.75'
    testImplementation "org.testcontainers:mysql"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation ("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.zalando:problem-spring-web"
    implementation "org.springframework.security:spring-security-config"

    //引入swagger，原生的swagger的ui是上下结构的，swagger-bootstrap-ui是基于左右菜单风格的方式,适用与我们在开发后台系统左右结构这种风格类似,方便与接口浏览
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'  //原生的，使用swagger-ui.html进行访问
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'com.github.xiaoymin:swagger-bootstrap-ui:1.9.6'

    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"
    implementation "io.jsonwebtoken:jjwt-api"
    if (!project.hasProperty("gae")) {
        runtimeOnly "io.jsonwebtoken:jjwt-impl"
        runtimeOnly "io.jsonwebtoken:jjwt-jackson"
    } else {
        implementation "io.jsonwebtoken:jjwt-impl"
        implementation "io.jsonwebtoken:jjwt-jackson"
    }
    implementation ("io.springfox:springfox-oas")
    implementation ("io.springfox:springfox-swagger2")
    implementation "io.springfox:springfox-bean-validators"
    implementation "mysql:mysql-connector-java"
//    liquibaseRuntime "mysql:mysql-connector-java"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernateVersion}"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxbRuntimeVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}"
    testImplementation "com.h2database:h2"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here

    // https://mvnrepository.com/artifact/cn.hutool/hutool-all
    implementation 'cn.hutool:hutool-all:5.7.9'  //Java工具类库

    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation 'com.google.guava:guava:30.1.1-jre'

}

if (project.hasProperty("gae")) {
    task createPom {
        def basePath = 'build/resources/main/META-INF/maven'
        doLast {
            pom {
                withXml(dependencyManagement.pomConfigurer)
            }.writeTo("${basePath}/${project.group}/${project.name}/pom.xml")
        }
    }
    bootJar.dependsOn = [createPom]
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "6.8.3"
}


if (project.hasProperty("nodeInstall")) {
    node {
        version = "14.16.0"
        npmVersion = "7.8.0"
        download = true
    }
}
compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

//compileJava {
//    //配置编译时生成代码的目录
//    options.compilerArgs << "-s"
//    options.compilerArgs << "$projectDir/src/main/generated/java"
//    //确保文件夹存在
//    doFirst {
//        file(new File(projectDir, "/src/main/generated/java")).mkdirs()
//    }
//}
////在clean时删除编译生成的代码
//clean.doLast {
//    // clean-up directory when necessary
//    file(new File(projectDir, "/src/main/generated")).deleteDir()
//}

